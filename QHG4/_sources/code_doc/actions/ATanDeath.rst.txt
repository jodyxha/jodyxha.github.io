.. _ATanDeath_ref:

ATanDeath
=========

.. rst-class:: hidden

   This page describes the class :index:`ATanDeath`

The class ``ATanDeath`` is derived from ``Action`` and serves as an age cut-off (probability-based deaths such as in ``LinearDeath`` make it possible that lucky agents can be hundreds of years old).
To calculate a death-probability for a given age we use a function :math:`d_p` defined as foolowse;

:math:`d_p(a) = 0 \;\;\; \forall a \in [-\infty, a_c - w]`, 

:math:`d_p(a) = 0.5 + h \cdot tan^{-1}(r \cdot (a - a_{c}))/\pi \; \forall a \in [a_c - w, a_c + w]`,

:math:`d_p(a) = 1 \;\;\; \forall a \in [a_c + w, \infty]`,

where :math:`w` is a positive real number, and :math:`r` is the slope at the inflection point, and the scaling factor

:math:`h = ( \frac{\pi}{2} - \varepsilon)/tan^{-1}(s \cdot w)`


.. figure:: ../../../images/atan.png

The translation brings the inflection point of the curve to the ccordinates :math:`(a_c, 0.5)`,
and the scaling is set to a value such that function :math:`d_p(a_c+w) = 1`.

This definition ensures that agents older than :math:`a_c+w` will certainly die.

Code: 
    | `ATanDeath.h <https://github.com/jodyxha/QHG4/blob/main/QHG4/actions/ATanDeath.h>`_ 
    | `ATanDeath.cpp <https://github.com/jodyxha/QHG4/blob/main/QHG4/actions/ATanDeath.cpp>`_


**Attributes**

+--------------------------------+---------------------+---------------------------------------------+
| ``ATTR_ATANDEATH_NAME``        | "ATanDeath"         | action name                                 |
+--------------------------------+---------------------+---------------------------------------------+
| ``ATTR_ATANDEATH_MAXAGE_NAME`` | "ATanDeath_max_age" | average maximum age (:math:`a_c`)           |
+--------------------------------+---------------------+---------------------------------------------+
| ``ATTR_ATANDEATH_RANGE_NAME``  | "ATanDeath_range"   | half width of variable interval (:math:`w`) |
+--------------------------------+---------------------+---------------------------------------------+
| ``ATTR_ATANDEATH_SLOPE_NAME``  | "ATanDeath_slope"   | slope at inflection point (:math:`r`)       |
+--------------------------------+---------------------+---------------------------------------------+

Public Methods
--------------

``constructor``
^^^^^^^^^^^^^^^

.. code-block:: c++

   ATanDeath(SPopulation<T> *pPop, SCellGrid *pCG, std::string sID, WELL512 **apWELL);,     

``pPop``
    A pointer to the :ref:`SPopulation<SPopulation_ref>` object performing this action.

``pCG``
    A pointer to the  :ref:`SCellGrid<SCellGrid_ref>` object on which the simulation runs.

``sID``
    An ID for this action.

``apWELL``
    A pointer to an array of :ref:`WELL512 random number generators<WELL512_ref>` (one for each thread). 

Creates a ``NPPCalc`` objects (in case temoerature and precipitation nee to be converted to NPP.

.. -----------------------------------------------------------------------------

``destructor``
^^^^^^^^^^^^^^
.. code-block:: c++

    virtual ~ATanDeath();

The destructor does nothing,

.. -----------------------------------------------------------------------------

``preLoop``
^^^^^^^^^^^^^^
.. code-block:: c++

    virtual int preLoop();

Calculates the scale using the attribute values.

.. -----------------------------------------------------------------------------

``execute``
^^^^^^^^^^^
.. code-block:: c++

    virtual int execute(int iAgentIndex, float fT);

``iAgentIndex``
    Current agent's index.

``fT``
    Current simulation step


Calculates the deathprobability for the agent, 
draws a random number :math:`r`, and kills the agent if :math:`r` is less than the death probability.

.. -----------------------------------------------------------------------------

``extractAttributesQDF``
^^^^^^^^^^^^^^^^^^^^^^^^
.. code-block:: c++

    virtual int extractAttributesQDF(hid_t hSpeciesGroup);

``hSpeciesGroup``
    HDF handle for the species group to read from.

This method reads the atttributes of this action from a QDF.

.. -----------------------------------------------------------------------------

``writeAttributesQDF``
^^^^^^^^^^^^^^^^^^^^^^
.. code-block:: c++

    virtual int writeAttributesQDF(hid_t hSpeciesGroup);

``hSpeciesGroup``
    HDF handle for the species group to write to.

This method writes the attributes of this action to the specified group in a QDF file.

.. -----------------------------------------------------------------------------

``tryGetAttributes``
^^^^^^^^^^^^^^^^^^^^
.. code-block:: c++

    virtual int tryGetAttributes(const ModuleComplex *pMC);

``pMC``
    A ``ModuleComplex`` object.

Extracts the action's attributes from the ``ModuleComplex`` object.


.. -----------------------------------------------------------------------------

``isEqual``
^^^^^^^^^^^
.. code-block:: c++

    virtual bool isEqual(Action<T> *pAction, bool bStrict);

``pAction``
    Pointer to an action object to compare with this.

``bStrict``
    Strictness of comparisons (ignored here).

``pAction`` is equal to ``this``, if it is a ``ATanDeath`` object whose attributes match those of ``this``.


.. -----------------------------------------------------------------------------
